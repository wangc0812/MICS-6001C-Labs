// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module real_matmul_real_matmul_Pipeline_MAT_C_ROWS_MAT_C_COLS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RFIFONUM,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        sext_ln71,
        MatC_address0,
        MatC_ce0,
        MatC_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [127:0] m_axi_mem_WDATA;
output  [15:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [127:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [8:0] m_axi_mem_RFIFONUM;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [59:0] sext_ln71;
output  [14:0] MatC_address0;
output   MatC_ce0;
input  [15:0] MatC_q0;

reg ap_idle;
reg m_axi_mem_WVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln74_reg_348;
reg   [0:0] icmp_ln74_reg_348_pp0_iter4_reg;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln71_fu_146_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mem_blk_n_W;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln73_fu_170_p2;
reg   [0:0] icmp_ln73_reg_333;
reg   [0:0] icmp_ln73_reg_333_pp0_iter1_reg;
reg   [0:0] icmp_ln73_reg_333_pp0_iter2_reg;
reg   [0:0] icmp_ln73_reg_333_pp0_iter3_reg;
wire   [7:0] select_ln71_fu_176_p3;
reg   [7:0] select_ln71_reg_338;
reg   [7:0] select_ln71_reg_338_pp0_iter1_reg;
wire   [0:0] icmp_ln74_fu_200_p2;
reg   [0:0] icmp_ln74_reg_348_pp0_iter1_reg;
reg   [0:0] icmp_ln74_reg_348_pp0_iter2_reg;
reg   [0:0] icmp_ln74_reg_348_pp0_iter3_reg;
wire   [111:0] select_ln71_1_fu_237_p3;
reg   [111:0] select_ln71_1_reg_363;
reg   [15:0] MatC_load_reg_368;
wire   [63:0] zext_ln74_2_fu_230_p1;
wire    ap_block_pp0_stage0_01001;
reg   [111:0] phi_ln74_fu_76;
wire   [111:0] select_ln74_fu_262_p3;
wire    ap_loop_init;
reg   [7:0] j_fu_80;
wire   [7:0] add_ln73_fu_206_p2;
reg   [7:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_84;
wire   [6:0] select_ln71_2_fu_184_p3;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [14:0] indvar_flatten28_fu_88;
wire   [14:0] add_ln71_1_fu_152_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten28_load;
reg    MatC_ce0_local;
wire   [6:0] add_ln71_fu_164_p2;
wire   [2:0] trunc_ln73_fu_196_p1;
wire   [14:0] grp_fu_287_p3;
wire   [95:0] tmp_s_fu_244_p4;
wire   [111:0] tmp_298_fu_254_p3;
wire   [7:0] grp_fu_287_p0;
wire   [6:0] grp_fu_287_p1;
wire   [7:0] grp_fu_287_p2;
reg    grp_fu_287_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [14:0] grp_fu_287_p10;
wire   [14:0] grp_fu_287_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 phi_ln74_fu_76 = 112'd0;
#0 j_fu_80 = 8'd0;
#0 i_fu_84 = 7'd0;
#0 indvar_flatten28_fu_88 = 15'd0;
#0 ap_done_reg = 1'b0;
end

real_matmul_mac_muladd_8ns_7ns_8ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mac_muladd_8ns_7ns_8ns_15_4_1_U168(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_287_p0),
    .din1(grp_fu_287_p1),
    .din2(grp_fu_287_p2),
    .ce(grp_fu_287_ce),
    .dout(grp_fu_287_p3)
);

real_matmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln71_fu_146_p2 == 1'd0))) begin
            i_fu_84 <= select_ln71_2_fu_184_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_84 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln71_fu_146_p2 == 1'd0))) begin
            indvar_flatten28_fu_88 <= add_ln71_1_fu_152_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten28_fu_88 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln71_fu_146_p2 == 1'd0))) begin
            j_fu_80 <= add_ln73_fu_206_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_80 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            phi_ln74_fu_76 <= 112'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            phi_ln74_fu_76 <= select_ln74_fu_262_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        MatC_load_reg_368 <= MatC_q0;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln73_reg_333_pp0_iter2_reg <= icmp_ln73_reg_333_pp0_iter1_reg;
        icmp_ln73_reg_333_pp0_iter3_reg <= icmp_ln73_reg_333_pp0_iter2_reg;
        icmp_ln74_reg_348_pp0_iter2_reg <= icmp_ln74_reg_348_pp0_iter1_reg;
        icmp_ln74_reg_348_pp0_iter3_reg <= icmp_ln74_reg_348_pp0_iter2_reg;
        icmp_ln74_reg_348_pp0_iter4_reg <= icmp_ln74_reg_348_pp0_iter3_reg;
        select_ln71_1_reg_363 <= select_ln71_1_fu_237_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln73_reg_333 <= icmp_ln73_fu_170_p2;
        icmp_ln73_reg_333_pp0_iter1_reg <= icmp_ln73_reg_333;
        icmp_ln74_reg_348 <= icmp_ln74_fu_200_p2;
        icmp_ln74_reg_348_pp0_iter1_reg <= icmp_ln74_reg_348;
        select_ln71_reg_338 <= select_ln71_fu_176_p3;
        select_ln71_reg_338_pp0_iter1_reg <= select_ln71_reg_338;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_ce0_local = 1'b1;
    end else begin
        MatC_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln71_fu_146_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_84;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten28_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten28_load = indvar_flatten28_fu_88;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 8'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_80;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_287_ce = 1'b1;
    end else begin
        grp_fu_287_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_348_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_mem_WVALID = 1'b1;
    end else begin
        m_axi_mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_348_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MatC_address0 = zext_ln74_2_fu_230_p1;

assign MatC_ce0 = MatC_ce0_local;

assign add_ln71_1_fu_152_p2 = (ap_sig_allocacmp_indvar_flatten28_load + 15'd1);

assign add_ln71_fu_164_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign add_ln73_fu_206_p2 = (select_ln71_fu_176_p3 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_io));
end

always @ (*) begin
    ap_block_state6_io = ((icmp_ln74_reg_348_pp0_iter4_reg == 1'd1) & (m_axi_mem_WREADY == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign grp_fu_287_p0 = 15'd200;

assign grp_fu_287_p1 = grp_fu_287_p10;

assign grp_fu_287_p10 = select_ln71_2_fu_184_p3;

assign grp_fu_287_p2 = grp_fu_287_p20;

assign grp_fu_287_p20 = select_ln71_reg_338_pp0_iter1_reg;

assign icmp_ln71_fu_146_p2 = ((ap_sig_allocacmp_indvar_flatten28_load == 15'd20000) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_170_p2 = ((ap_sig_allocacmp_j_load == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_200_p2 = ((trunc_ln73_fu_196_p1 == 3'd7) ? 1'b1 : 1'b0);

assign m_axi_mem_ARADDR = 64'd0;

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd0;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_ARVALID = 1'b0;

assign m_axi_mem_AWADDR = 64'd0;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd0;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_AWVALID = 1'b0;

assign m_axi_mem_BREADY = 1'b0;

assign m_axi_mem_RREADY = 1'b0;

assign m_axi_mem_WDATA = {{MatC_load_reg_368}, {select_ln71_1_reg_363}};

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 16'd65535;

assign m_axi_mem_WUSER = 1'd0;

assign select_ln71_1_fu_237_p3 = ((icmp_ln73_reg_333_pp0_iter3_reg[0:0] == 1'b1) ? 112'd0 : phi_ln74_fu_76);

assign select_ln71_2_fu_184_p3 = ((icmp_ln73_fu_170_p2[0:0] == 1'b1) ? add_ln71_fu_164_p2 : ap_sig_allocacmp_i_load);

assign select_ln71_fu_176_p3 = ((icmp_ln73_fu_170_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_j_load);

assign select_ln74_fu_262_p3 = ((icmp_ln74_reg_348_pp0_iter3_reg[0:0] == 1'b1) ? 112'd0 : tmp_298_fu_254_p3);

assign tmp_298_fu_254_p3 = {{MatC_q0}, {tmp_s_fu_244_p4}};

assign tmp_s_fu_244_p4 = {{select_ln71_1_fu_237_p3[111:16]}};

assign trunc_ln73_fu_196_p1 = select_ln71_fu_176_p3[2:0];

assign zext_ln74_2_fu_230_p1 = grp_fu_287_p3;

endmodule //real_matmul_real_matmul_Pipeline_MAT_C_ROWS_MAT_C_COLS
