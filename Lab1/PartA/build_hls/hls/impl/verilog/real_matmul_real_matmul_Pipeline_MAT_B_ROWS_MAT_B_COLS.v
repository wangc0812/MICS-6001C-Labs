// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module real_matmul_real_matmul_Pipeline_MAT_B_ROWS_MAT_B_COLS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RFIFONUM,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        MatB_address0,
        MatB_ce0,
        MatB_we0,
        MatB_d0,
        sext_ln36
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [127:0] m_axi_mem_WDATA;
output  [15:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [127:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [8:0] m_axi_mem_RFIFONUM;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
output  [7:0] MatB_address0;
output   MatB_ce0;
output  [299:0] MatB_we0;
output  [2399:0] MatB_d0;
input  [59:0] sext_ln36;

reg ap_idle;
reg m_axi_mem_RREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln36_reg_348;
reg   [0:0] icmp_ln39_reg_363;
reg    ap_predicate_op32_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_153_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln36_reg_348_pp0_iter1_reg;
wire   [0:0] icmp_ln38_fu_168_p2;
reg   [0:0] icmp_ln38_reg_352;
reg   [0:0] icmp_ln38_reg_352_pp0_iter1_reg;
wire   [7:0] select_ln36_fu_174_p3;
reg   [7:0] select_ln36_reg_358;
reg   [7:0] select_ln36_reg_358_pp0_iter1_reg;
wire   [0:0] icmp_ln39_fu_186_p2;
reg   [0:0] icmp_ln39_reg_363_pp0_iter1_reg;
reg   [127:0] mem_addr_read_reg_367;
reg   [127:0] ap_phi_mux_empty_phi_fu_120_p4;
wire   [127:0] ap_phi_reg_pp0_iter2_empty_reg_117;
wire   [127:0] zext_ln38_fu_248_p1;
wire   [63:0] zext_ln38_1_fu_253_p1;
reg   [111:0] shiftreg353_fu_78;
wire    ap_loop_init;
reg   [7:0] j_fu_82;
wire   [7:0] add_ln38_fu_192_p2;
reg   [7:0] ap_sig_allocacmp_j_load;
reg   [7:0] i_fu_86;
wire   [7:0] select_ln36_2_fu_233_p3;
reg   [14:0] indvar_flatten7_fu_90;
wire   [14:0] add_ln36_1_fu_159_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten7_load;
reg    MatB_ce0_local;
reg   [299:0] MatB_we0_local;
wire   [2399:0] shl_ln39_fu_279_p2;
wire   [299:0] shl_ln39_1_fu_298_p2;
wire   [2:0] trunc_ln38_fu_182_p1;
wire   [7:0] add_ln36_fu_220_p2;
wire   [111:0] select_ln36_1_fu_226_p3;
wire   [11:0] tmp_s_fu_240_p3;
wire   [15:0] trunc_ln39_fu_257_p1;
wire   [2399:0] zext_ln39_1_fu_275_p1;
wire   [2399:0] zext_ln39_fu_271_p1;
wire   [8:0] tmp_fu_286_p3;
wire   [299:0] zext_ln39_2_fu_294_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 shiftreg353_fu_78 = 112'd0;
#0 j_fu_82 = 8'd0;
#0 i_fu_86 = 8'd0;
#0 indvar_flatten7_fu_90 = 15'd0;
#0 ap_done_reg = 1'b0;
end

real_matmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            i_fu_86 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_fu_86 <= select_ln36_2_fu_233_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_153_p2 == 1'd0))) begin
            indvar_flatten7_fu_90 <= add_ln36_1_fu_159_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten7_fu_90 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_153_p2 == 1'd0))) begin
            j_fu_82 <= add_ln38_fu_192_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_82 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            shiftreg353_fu_78 <= 112'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            shiftreg353_fu_78 <= {{ap_phi_mux_empty_phi_fu_120_p4[127:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln36_reg_348 <= icmp_ln36_fu_153_p2;
        icmp_ln36_reg_348_pp0_iter1_reg <= icmp_ln36_reg_348;
        icmp_ln38_reg_352 <= icmp_ln38_fu_168_p2;
        icmp_ln38_reg_352_pp0_iter1_reg <= icmp_ln38_reg_352;
        icmp_ln39_reg_363 <= icmp_ln39_fu_186_p2;
        icmp_ln39_reg_363_pp0_iter1_reg <= icmp_ln39_reg_363;
        mem_addr_read_reg_367 <= m_axi_mem_RDATA;
        select_ln36_reg_358 <= select_ln36_fu_174_p3;
        select_ln36_reg_358_pp0_iter1_reg <= select_ln36_reg_358;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MatB_ce0_local = 1'b1;
    end else begin
        MatB_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MatB_we0_local = shl_ln39_1_fu_298_p2;
    end else begin
        MatB_we0_local = 300'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_fu_153_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln36_reg_348_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln39_reg_363_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_120_p4 = zext_ln38_fu_248_p1;
        end else if ((icmp_ln39_reg_363_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_120_p4 = mem_addr_read_reg_367;
        end else begin
            ap_phi_mux_empty_phi_fu_120_p4 = ap_phi_reg_pp0_iter2_empty_reg_117;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_120_p4 = ap_phi_reg_pp0_iter2_empty_reg_117;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten7_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten7_load = indvar_flatten7_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 8'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op32_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_mem_RREADY = 1'b1;
    end else begin
        m_axi_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op32_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MatB_address0 = zext_ln38_1_fu_253_p1;

assign MatB_ce0 = MatB_ce0_local;

assign MatB_d0 = shl_ln39_fu_279_p2;

assign MatB_we0 = MatB_we0_local;

assign add_ln36_1_fu_159_p2 = (ap_sig_allocacmp_indvar_flatten7_load + 15'd1);

assign add_ln36_fu_220_p2 = (i_fu_86 + 8'd1);

assign add_ln38_fu_192_p2 = (select_ln36_fu_174_p3 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op32_read_state2 == 1'b1) & (m_axi_mem_RVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter2_empty_reg_117 = 'bx;

always @ (*) begin
    ap_predicate_op32_read_state2 = ((icmp_ln39_reg_363 == 1'd1) & (icmp_ln36_reg_348 == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign icmp_ln36_fu_153_p2 = ((ap_sig_allocacmp_indvar_flatten7_load == 15'd30000) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_168_p2 = ((ap_sig_allocacmp_j_load == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_186_p2 = ((trunc_ln38_fu_182_p1 == 3'd0) ? 1'b1 : 1'b0);

assign m_axi_mem_ARADDR = 64'd0;

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd0;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_ARVALID = 1'b0;

assign m_axi_mem_AWADDR = 64'd0;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd0;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_AWVALID = 1'b0;

assign m_axi_mem_BREADY = 1'b0;

assign m_axi_mem_WDATA = 128'd0;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 16'd0;

assign m_axi_mem_WUSER = 1'd0;

assign m_axi_mem_WVALID = 1'b0;

assign select_ln36_1_fu_226_p3 = ((icmp_ln38_reg_352_pp0_iter1_reg[0:0] == 1'b1) ? 112'd0 : shiftreg353_fu_78);

assign select_ln36_2_fu_233_p3 = ((icmp_ln38_reg_352_pp0_iter1_reg[0:0] == 1'b1) ? add_ln36_fu_220_p2 : i_fu_86);

assign select_ln36_fu_174_p3 = ((icmp_ln38_fu_168_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_j_load);

assign shl_ln39_1_fu_298_p2 = 300'd3 << zext_ln39_2_fu_294_p1;

assign shl_ln39_fu_279_p2 = zext_ln39_1_fu_275_p1 << zext_ln39_fu_271_p1;

assign tmp_fu_286_p3 = {{select_ln36_2_fu_233_p3}, {1'd0}};

assign tmp_s_fu_240_p3 = {{select_ln36_2_fu_233_p3}, {4'd0}};

assign trunc_ln38_fu_182_p1 = select_ln36_fu_174_p3[2:0];

assign trunc_ln39_fu_257_p1 = ap_phi_mux_empty_phi_fu_120_p4[15:0];

assign zext_ln38_1_fu_253_p1 = select_ln36_reg_358_pp0_iter1_reg;

assign zext_ln38_fu_248_p1 = select_ln36_1_fu_226_p3;

assign zext_ln39_1_fu_275_p1 = trunc_ln39_fu_257_p1;

assign zext_ln39_2_fu_294_p1 = tmp_fu_286_p3;

assign zext_ln39_fu_271_p1 = tmp_s_fu_240_p3;

endmodule //real_matmul_real_matmul_Pipeline_MAT_B_ROWS_MAT_B_COLS
